#!/bin/sh

# Copyright (c) 2016, Percona LLC and/or its affiliates. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

DIRTY_BUILD="${DIRTY_BUILD:-"no"}"
BIN="pmm-admin"

if [ $# -eq 1 -a "$1" = "help" ]; then
   echo "Usage: $0"
   echo
   echo "This script must be ran from the repo root dir."
   echo "Binaries and packages are put in distro/."
   exit 0
fi

set -eu

err() {
   echo "ERROR: $@" >&2
   exit 1
}

# Find and cd to repo root dir.
[ "$(basename "$PWD")" = "scripts" ] && cd ..
if [ -d ".git" ]; then
   ROOT_DIR="$PWD"
else
   err "Run this script from the repo root dir or the build/ dir."
fi

if [ -z "$(which strings)" ]; then
   err "The 'strings' program is required. Install binutils."
fi

PLATFORM=`uname -m`
if [ "$PLATFORM" = "x86_64" ]; then
   ARCH="x86_64"  # no change
elif [ "$PLATFORM" = "i686" -o "$PLATFORM" = "i386" ]; then
   ARCH="i386"
else
   err "Unknown platform (uname -m): $PLATFORM (expected x86_64, i686, or i386)"
fi

cd "$ROOT_DIR"

# Determine if this is a dev or release build. A release build requires using
# the master branch that's tagged with the same version in conf/app.conf. Else,
# we presume dev build.
DEV="yes"
VER="$(awk '/var VERSION/ {print $5}' $ROOT_DIR/pmm.go | sed 's/"//g')"
REV="$(git log -n 1 --no-walk --pretty="%h")"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
if [ "$BRANCH" = "master" ]; then
   # git log -n 1 --no-walk --tags --pretty="%h %d" --decorate=full
   # 1475390  (HEAD, tag: refs/tags/v1.0.0, refs/remotes/origin/master, refs/heads/master, refs/heads/foo)
   latestTag="$(git log -n 1 --no-walk --tags --pretty="%h %d" --decorate=full)"
   tagRev="$(echo "$latestTag" | awk '{print $1}')"
   tagVer="$(echo "$latestTag" | perl -n -e '/refs\/tags\/v([\d\.]+)/ && print $1')"
   if [ "$tagVer" -a "$tagRev" = "$REV" ]; then
      if [ "$tagVer" != "$VER" ]; then
         err "Version mismatch: conf/app.conf has v$VER, but git tag has v$tagVer"
      else
         dirty="$(git status --porcelain)"
         if [ "$dirty" ]; then
            if [ "$DIRTY_BUILD" = "no" ]; then
               err "Cannot do release build because this is the master branch with version" \
                  "tag v$tagVer but there are uncommitted changes or untracked files" \
                  "(see 'git status'). If the latest commit is not v$tagVer, remove the tag (git tag -d v$tagVer);" \
                  "else, add and commit all changes, then re-tag the latest commit" \
                  "(git tag -a v$tagVer -m \"v$tagVer\"). Or, specify DIRTY_BUILD=yes to force" \
                  "the release build (not recommended)."
            else
               echo "Dirty release build of master branch v$VER"
            fi
         else
            echo "Release build of master branch v$VER"
         fi
         DEV="no"
      fi
   else
      echo "Dev build of master branch @ $REV (latest commit has no version tag)"
   fi
else
   echo "Dev build of $BRANCH branch @ $REV"
fi

# To distinguish dev and release builds, we append "-date.revision" to dev builds,
# e.g. release 1.0.0 = "1.0.0", but dev 1.0.0 = "1.0.0-20150825.a73cd9e".
# Also, unless DEPS is set explicitly, dev builds don't use vendoring but release builds do.
if [ "$DEV" = "yes" ]; then
   ymd="$(TZ="UTC" date "+%Y%m%d")"
   VER="$VER-$ymd.$REV"
   DEPS="${DEPS:-"no"}"
else
   DEPS="${DEPS:-"yes"}"
fi

# Install/update deps (vendoring)
if [ "$DEPS" = "yes" ]; then
   VENDOR_DIR="$ROOT_DIR/vendor"
   [ ! -d "$VENDOR_DIR" ] && mkdir "$VENDOR_DIR"
   export GOPATH="$VENDOR_DIR:$GOPATH"
   echo "Cloning deps into $VENDOR_DIR..."
   set +e
   GOPATH="$VENDOR_DIR" godep restore
   set -e
fi

# Build binaries
echo "Building $BIN..."
(
   cd $ROOT_DIR/bin/$BIN
   go build -ldflags "-X github.com/percona/pmm-admin/pmm.VERSION=$VER"
   # Check that binary was compiled with pkgs from vendor dir.
   if [ "$DEPS" = "yes" ]; then
      strings $BIN | grep -q "$VENDOR_DIR/src/github.com/go-sql-driver/mysql" \
         || err "$BIN not built with vendor deps ($VENDOR_DIR)"
   fi
)

# Set up the distro dir
DISTRO_DIR="$ROOT_DIR/distro"
[ ! -d "distro" ] && mkdir distro
cd distro/

# Build the package
PKG_NAME="$BIN-$VER-$ARCH"
[ -f "$PKG_NAME.tar.gz" ] && rm -f "$PKG_NAME.tar.gz"
if [ -d $PKG_NAME ]; then
   rm -rf "$PKG_NAME"/*
else
   mkdir "$PKG_NAME"
fi

# Copy files to package
cp ../bin/$BIN/$BIN $PKG_NAME/

# Tarball the pkg dir
tar cvfz $PKG_NAME.tar.gz $PKG_NAME/ > /dev/null

echo
echo "Done building distro/$PKG_NAME.tar.gz"
echo
